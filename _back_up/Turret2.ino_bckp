// Continue writing the Command functions (translating packets into commands)
// Then implement SerialTransfer and pySerialTransfer (already tested)
// Lastly, work on the main loop, integrate sensors, 
// serial communication and control into several high level commands.

// I AM SO CLOSE TO FINISHING THIS PROJECT

void printHex(int num, int precision) {
      char tmp[16];
      char format[128];

      sprintf(format, "%%.%dX", precision);

      sprintf(tmp, format, num);
      Serial.print(tmp);
}


// Below code is tested and works, try to connect motors next time.

#include "pfm_cnc.hpp"
#include "pfm_isr.h"
#include "imu.hpp"
#include "pkt_process_cmd.hpp"

// Arduino Wire library is required if I2Cdev I2CDEV_ARDUINO_WIRE implementation
// is used in I2Cdev.h
#include "Wire.h"
// I2Cdev and MPU6050 must be installed as libraries, or else the .cpp/.h files
// for both classes must be in the include path of your project
#include "I2Cdev.h"
#include "MPU6050.h"

Imu imu(MPU9250_DEFAULT_ADDRESS);
Pfm_cnc Pfm;
Pkt_pfm Pkt(&Pfm, &imu);

union Pkt_uint16_t {
    uint16_t val;
    uint8_t arr[2];
};

uint8_t return_buffer[18];
bool Pkt_correct = false;


void setup()
{
  Serial.begin(115200);
  while (!Serial) 
  { 
    ; // Wait for serial to connect 
  }
  Serial.println("Running.");
  // delay(200);

  // IMU
  Wire.begin();
  imu.initialize();

  // get measuremens 
  imu.perform_measurement();


  Pfm.init();
  // Pfm.init_memory();
  // enable cnc
  Pfm.enable_cnc();

// set initial direction and speed  
  // Pfm.set_target_freq(PFM_Y, 8, false);

  uint8_t test_CMD_SET_TARGET_FREQ[4] = {0x0F, 0x00, 0xFF, 0x0F};
  Pkt_correct = Pkt.process_command(CMD_SET_TARGET_FREQ, 4, test_CMD_SET_TARGET_FREQ, return_buffer);
  if(Pkt_correct){Serial.print("Pkt correct \n");}else{Serial.print("Pkt INCORRECT \n");}

  // uint8_t test_CMD_SET_TARGET_DELTA[7] = {0x02, 0x01, 0x08, 0x00, 0xFF, 0xFF, 0xFF};
  // Pkt_correct = Pkt.process_command(CMD_SET_TARGET_DELTA, 7, test_CMD_SET_TARGET_DELTA, return_buffer);
  // if(Pkt_correct){Serial.print("Pkt correct \n");}else{Serial.print("Pkt INCORRECT \n");}

  uint8_t test_CMD_GET_DELTA_STEPS[7] = {0x02};
  Pkt_correct = Pkt.process_command(CMD_GET_DELTA_STEPS, 1, test_CMD_GET_DELTA_STEPS, return_buffer);
  if(Pkt_correct){Serial.print("Pkt correct \n");}else{Serial.print("Pkt INCORRECT \n");}
  for (int i = 3; i > -1; i--) Serial.print(return_buffer[i], HEX); Serial.print("\n");

  uint8_t test_CMD_SET_ISR_FREQ[7] = {0x19, 0x00}; // 6400
  // uint8_t test_CMD_SET_ISR_FREQ[7] = {0x12, 0xC0}; // 3200
  Pkt_correct = Pkt.process_command(CMD_SET_ISR_FREQ, 2, test_CMD_SET_ISR_FREQ, NULL);
  if(Pkt_correct){Serial.print("Pkt correct \n");}else{Serial.print("Pkt INCORRECT \n");}

  Pkt_correct = Pkt.process_command(CMD_GET_ISR_FREQ, 0, NULL, return_buffer);
  if(Pkt_correct){Serial.print("Pkt correct \n");}else{Serial.print("Pkt INCORRECT \n");}
  for (int i = 3; i > -1; i--) Serial.print(return_buffer[i], HEX); Serial.print("\n");

  Pkt_correct = Pkt.process_command(CMD_GET_IMU_MEASUREMENT, 0, NULL, return_buffer);
  if(Pkt_correct){Serial.print("Pkt correct \n");}else{Serial.print("Pkt INCORRECT \n");}
  for (int i = 17; i > -1; i--) Serial.print(return_buffer[i], HEX); Serial.print("\n");


  // delay(5000);
  // Pkt_correct = Pkt.process_command(CMD_DISABLE_CNC, 0, NULL, NULL);
  // delay(2000);
  // Pkt_correct = Pkt.process_command(CMD_ENABLE_CNC, 0, NULL, NULL);


  Serial.print("init X \t");
  Serial.print(int32_t(pfm[PFM_X]._isr_pfm_counter)); Serial.print("\t");
  Serial.print(int32_t(pfm[PFM_X].pfm_delta_steps)); Serial.print("\t");
  Serial.print(int32_t(pfm[PFM_X].pfm_target_freq)); Serial.print("\t");
  Serial.print(int32_t(pfm[PFM_X].pfm_direction)); Serial.print("\t");
  Serial.print(int32_t(pfm[PFM_X].pfm_target_delta)); Serial.print("\t");
  Serial.print("\n");

  Serial.print("init Y \t");
  Serial.print(int32_t(pfm[PFM_Y]._isr_pfm_counter)); Serial.print("\t");
  Serial.print(int32_t(pfm[PFM_Y].pfm_delta_steps)); Serial.print("\t");
  Serial.print(int32_t(pfm[PFM_Y].pfm_target_freq)); Serial.print("\t");
  Serial.print(int32_t(pfm[PFM_Y].pfm_direction)); Serial.print("\t");
  Serial.print(int32_t(pfm[PFM_Y].pfm_target_delta)); Serial.print("\t");
  Serial.print("\n");

  Serial.print("init Z \t");
  Serial.print(int32_t(pfm[PFM_Z]._isr_pfm_counter)); Serial.print("\t");
  Serial.print(int32_t(pfm[PFM_Z].pfm_delta_steps)); Serial.print("\t");
  Serial.print(int32_t(pfm[PFM_Z].pfm_target_freq)); Serial.print("\t");
  Serial.print(int32_t(pfm[PFM_Z].pfm_direction)); Serial.print("\t");
  Serial.print(int32_t(pfm[PFM_Z].pfm_target_delta)); Serial.print("\t");
  Serial.print("\n");



}


void loop()
{
  // if(Pfm.get_delta_steps(PFM_Y) > 1000)
  // {
  //   Pfm.set_target_freq(PFM_Y, 8, false);
  // }
  // if(Pfm.get_delta_steps(PFM_Y) <= 0)
  // {
  //   Pfm.set_target_freq(PFM_Y, 8, true);
  // }

  // // // Pfm.enable_cnc();
  // // pfm[PFM_Y].pfm_direction = 1;
  // // pfm[PFM_Y].pfm_target_freq = 4;
  // // pfm[PFM_Y]._cnc_shield_step_pin = 3;

  // Serial.print("state \t");
  // Serial.print(int32_t(pfm[PFM_Y]._isr_pfm_counter)); Serial.print("\t");
  // Serial.print(int32_t(pfm[PFM_Y].pfm_delta_steps)); Serial.print("\t");
  // Serial.print(int32_t(pfm[PFM_Y].pfm_target_freq)); Serial.print("\t");
  // Serial.print(int32_t(pfm[PFM_Y].pfm_direction)); Serial.print("\t");
  // // Serial.print(int32_t(pfm[PFM_Y].pfm_target_delta)); Serial.print("\t");
  // Serial.print(int32_t(pfm[PFM_Y]._cnc_shield_step_pin)); Serial.print("\t");
  // Serial.print("\n");

  Pkt_correct = Pkt.process_command(CMD_DISABLE_CNC, 0, NULL, NULL);

  imu.perform_measurement();
  imu.perform_measurement();
  imu.perform_measurement();

  Pkt_correct = Pkt.process_command(CMD_GET_IMU_MEASUREMENT, 0, NULL, return_buffer);
  for (int i = 17; i > -1; i--) printHex(return_buffer[i], 2); Serial.print("\n");

}
